<!-- 
    Axiom UI
    Copyright (C) 2017-2021 Matt McManis
    https://github.com/MattMcManis/Axiom
    https://axiomui.github.io
    mattmcmanis@outlook.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.If not, see<http://www.gnu.org/licenses/> . 
 -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <!--///////////////////////////////////////////////////////////////////////////////////////////////////////////////
         Template Default
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--/////////////////////////////////////
         Main Window Default
        /////////////////////////////////////-->

    <!-- Main Window Template -->
    <ControlTemplate x:Key="WindowTemplateKey"
                     TargetType="{x:Type Window}">
        <Border BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}">
            <Grid>
                <AdornerDecorator>
                    <ContentPresenter />
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip"
                            HorizontalAlignment="Right"
                            IsTabStop="false"
                            Visibility="Collapsed"
                            VerticalAlignment="Bottom" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode"
                               Value="CanResizeWithGrip" />
                    <Condition Property="WindowState"
                               Value="Normal" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility"
                        TargetName="WindowResizeGrip"
                        Value="Visible" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <!--/////////////////////////////////////
         Label
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="LabelStyle.Static.Foreground"
                     Color="#FFFFFFFF" />

    <Style x:Key="LabelStyle"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource LabelStyle.Static.Foreground}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="5" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--/////////////////////////////////////
         ComboBox Default
        /////////////////////////////////////-->
    <!-- Static -->
    <LinearGradientBrush x:Key="ComboBox.Static.Background"
                         EndPoint="0,1"
                         StartPoint="0,0">
        <GradientStop Color="#FFF0F0F0"
                      Offset="0.0" />
        <GradientStop Color="#FFE5E5E5"
                      Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Static.Border"
                     Color="#FFad8a4a" />
    <!-- Disabled -->
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph"
                     Color="#FFBFBFBF" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Background"
                     Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Foreground"
                     Color="DarkGray" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Border"
                     Color="#FFD9D9D9" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border"
                     Color="#FFBFBFBF" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.Static.Glyph"
                     Color="#FF606060" />
    <!-- Editable -->
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border"
                     Color="Transparent" />
    <!-- Mouse Over -->
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph"
                     Color="#FF076d52" />
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background"
                         EndPoint="0,1"
                         StartPoint="0,0">
        <GradientStop Color="#FFECF4FC"
                      Offset="0.0" />
        <GradientStop Color="#FFDCECFC"
                      Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border"
                     Color="#FFad8a4a" />
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background"
                         EndPoint="0,1"
                         StartPoint="0,0">
        <GradientStop Color="#FFEBF4FC"
                      Offset="0.0" />
        <GradientStop Color="#FFDCECFC"
                      Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border"
                     Color="#FFad8a4a" />
    <!-- Pressed -->
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph"
                     Color="#FF076d52" />
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background"
                         EndPoint="0,1"
                         StartPoint="0,0">
        <GradientStop Color="#FFDAECFC"
                      Offset="0.0" />
        <GradientStop Color="#FFC4E0FC"
                      Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border"
                     Color="#FF569DE5" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border"
                     Color="#FF569DE5" />
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background"
                         EndPoint="0,1"
                         StartPoint="0,0">
        <GradientStop Color="#FFDAEBFC"
                      Offset="0.0" />
        <GradientStop Color="#FFC4E0FC"
                      Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border"
                     Color="#FF569DE5" />


    <!-- Border Thickness-->
    <Thickness x:Key="Border.Static.Thickness.None"
               Top="0"
               Right="0"
               Bottom="0"
               Left="0" />
    <Thickness x:Key="Border.MouseOver.Thickness.One"
               Top="1"
               Right="1"
               Bottom="1"
               Left="1" />

    <!-- Padding -->
    <Thickness x:Key="PaddingStaticThickness"
               Top="0"
               Right="0"
               Bottom="0"
               Left="0" />

    <!--/////////////////////////////////////
         Textbox Default
        /////////////////////////////////////-->
    <!-- Disabled -->
    <SolidColorBrush x:Key="TextBox.Disabled.Foreground"
                     Color="DarkGray" />





    <!--///////////////////////////////////////////////////////////////////////////////////////////////////////////////
         Template White
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////-->

    <!--/////////////////////////////////////
         ComboBox White
        /////////////////////////////////////-->
    <!-- Static -->
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.Static.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.Static.Border"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBoxCategoryStyleHeader.Static.Foreground"
                     Color="#FFad8a4a" />

    <!-- Disabled-->
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.Disabled.Foreground"
                     Color="#FF076d52" />
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.Disabled.Background"
                     Color="#FFBDBDBD" />
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.Disabled.Border"
                     Color="#FFBDBDBD" />

    <!-- Mouse Over-->
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.MouseOver.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.MouseOver.Border"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.MouseOver.Background"
                     Color="#FFad8a4a" />

    <!-- Editable-->
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.Editable.Foreground"
                     Color="#FF076d52" />

    <!--/////////////////////////////////////
         TextBox White
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="TextBoxWhite.Static.Background"
                     Color="#FFFFFFFF" />

    <!--/////////////////////////////////////
         ComboBox Glyph White
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.Static.Glyph"
                     Color="#FF606060" />
    <SolidColorBrush x:Key="ComboBoxCategoryStyle.MouseOver.Glyph"
                     Color="#FF076d52" />

    <!-- <SolidColorBrush x:Key="TextBoxWhite.Static.Background" Color="#FFFFFFFF"/> -->
    <Style x:Key="ComboBox.Editable.TextBox"
           TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="MinHeight"
                Value="0" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ComboBox White Toggle Button -->
    <Style x:Key="ComboBoxCategoryStyle.ToggleButton"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="ClickMode"
                Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot"
                            SnapsToDevicePixels="true">
                        <!-- BorderBrush="{StaticResource ComboBoxCategoryStyle.Static.Border}" BorderThickness="{StaticResource Border.Static.Thickness.None} Background="{StaticResource ComboBoxCategoryStyle.Static.Background}"" -->
                        <Border x:Name="splitBorder"
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                HorizontalAlignment="Right"
                                Margin="0"
                                SnapsToDevicePixels="true"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow"
                                  Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                  Fill="{StaticResource ComboBoxCategoryStyle.Static.Glyph}"
                                  HorizontalAlignment="Center"
                                  Margin="0"
                                  VerticalAlignment="Center" />

                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Static.Editable.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Static.Editable.Border}" />
                            <Setter Property="Background"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource ComboBoxCategoryStyle.MouseOver.Glyph}" />
                        </Trigger>
                        <!-- Mouse Over False -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <!-- Background Image -->
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBoxCategoryStyle.Static.Background}" />
                            <!-- Mouse Over Border Color -->
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="Transparent" />
                            <!-- Mouse Over Border Thickness -->
                            <Setter Property="BorderThickness"
                                    TargetName="templateRoot"
                                    Value="0" />
                        </MultiDataTrigger>
                        <!-- Mouse Over True -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <!-- Mouse Over Background Image -->
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBoxCategoryStyle.MouseOver.Border}" />
                            <!-- Mouse Over Border Color -->
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Border}" />
                            <!-- Mouse Over Border Thickness -->
                            <Setter Property="BorderThickness"
                                    TargetName="templateRoot"
                                    Value="0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Border}" />
                            <Setter Property="Background"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource ComboBox.Pressed.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Border}" />
                            <Setter Property="Background"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource ComboBox.Disabled.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <!-- Disabled Background Image -->
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBoxCategoryStyle.Disabled.Background}">
                            </Setter>
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBoxCategoryStyle.Disabled.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Border}" />
                            <Setter Property="Background"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ComboBox White Item Template -->
    <ControlTemplate x:Key="ComboBoxCategoryStyle.Item.ControlTemplate"
                     TargetType="{x:Type ComboBoxItem}">
        <Border x:Name="Bd"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="True">
            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Border>
        <ControlTemplate.Triggers>
            <!-- Item Header -->
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="TextElement.Foreground"
                        TargetName="Bd"
                        Value="{StaticResource ComboBoxCategoryStyleHeader.Static.Foreground}" />
            </Trigger>
            <!-- Background Mouse Over Not Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="False" />
                    <Condition Property="IsMouseOver"
                               Value="True" />
                    <Condition Property="IsKeyboardFocused"
                               Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#A8b4b4b4" />
            </MultiTrigger>
            <!-- Background Selected Keyboard Focused -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="True" />
                    <Condition Property="IsMouseOver"
                               Value="False" />
                    <Condition Property="IsKeyboardFocused"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFad8a4a" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFad8a4a" />
            </MultiTrigger>
            <!-- Background Mouse Over Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="True" />
                    <Condition Property="IsMouseOver"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
            </MultiTrigger>
            <!-- Background Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="True" />
                    <Condition Property="IsMouseOver"
                               Value="False" />
                    <Condition Property="IsKeyboardFocused"
                               Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFad8a4a" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFad8a4a" />
            </MultiTrigger>
            <!-- Background Not Selected Keyboard Focused -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="False" />
                    <Condition Property="IsMouseOver"
                               Value="False" />
                    <Condition Property="IsKeyboardFocused"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FF054536" />
            </MultiTrigger>
            <!-- Background Mouse Over Not Selected Keyboard Focused -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="False" />
                    <Condition Property="IsMouseOver"
                               Value="True" />
                    <Condition Property="IsKeyboardFocused"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ComboBox White Item - Format Containers -->
    <Style x:Key="ComboBoxCategoryStyleItem_FormatContainer"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Template"
                Value="{StaticResource ComboBoxCategoryStyle.Item.ControlTemplate}" />
        <Setter Property="Foreground"
                Value="#FF000000" />
        <Setter Property="Background"
                Value="#FFFFFFFF" />
        <Setter Property="BorderBrush"
                Value="#FFFFFFFF" />
        <Style.Triggers>

            <!-- Selected -->
            <Trigger Property="IsSelected"
                     Value="true">
                <Setter Property="Foreground"
                        Value="{StaticResource ComboBoxCategoryStyle.Static.Foreground}" />
                <Setter Property="Background"
                        Value="{StaticResource ComboBoxCategoryStyle.Static.Background}" />
            </Trigger>

            <!-- Mouse Over -->
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Foreground"
                        Value="{StaticResource ComboBoxCategoryStyle.MouseOver.Foreground}" />
                <Setter Property="Background"
                        Value="{StaticResource ComboBoxCategoryStyle.MouseOver.Background}" />
            </Trigger>

            <!-- Headers -->
            <DataTrigger Binding="{Binding Category}"
                         Value="True">
                <Setter Property="IsEnabled"
                        Value="False" />
                <Setter Property="FontWeight"
                        Value="Bold" />
                <Setter Property="Margin"
                        Value="0,7,0,0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Category}"
                         Value="False">
                <Setter Property="Margin"
                        Value="0,0,0,0" />
            </DataTrigger>

        </Style.Triggers>
    </Style>


    <!-- ComboBox White Item -->
    <Style x:Key="ComboBoxCategoryStyleItem"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Template"
                Value="{StaticResource ComboBoxCategoryStyle.Item.ControlTemplate}" />
        <Setter Property="Foreground"
                Value="#FF000000" />
        <Setter Property="Background"
                Value="#FFFFFFFF" />
        <Setter Property="BorderBrush"
                Value="#FFFFFFFF" />
        <Style.Triggers>

            <!-- Selected -->
            <Trigger Property="IsSelected"
                     Value="true">
                <Setter Property="Foreground"
                        Value="{StaticResource ComboBoxCategoryStyle.Static.Foreground}" />
                <Setter Property="Background"
                        Value="{StaticResource ComboBoxCategoryStyle.Static.Background}" />
            </Trigger>

            <!-- Mouse Over -->
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Foreground"
                        Value="{StaticResource ComboBoxCategoryStyle.MouseOver.Foreground}" />
                <Setter Property="Background"
                        Value="{StaticResource ComboBoxCategoryStyle.MouseOver.Background}" />
            </Trigger>

        </Style.Triggers>
    </Style>


    <!-- ComboBox White Template -->
    <ControlTemplate x:Key="ComboBoxCategoryStyle.Template"
                     TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot"
              SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow"
                                               Color="Transparent"
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder"
                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                            BorderThickness="1"
                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid"
                                  RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                        HorizontalAlignment="Left"
                                        Height="0"
                                        VerticalAlignment="Top"
                                        Width="0">
                                    <Rectangle x:Name="opaqueRect"
                                               Fill="{Binding Background, ElementName=dropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}"
                          Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxCategoryStyle.ToggleButton}" />
            <ContentPresenter x:Name="contentPresenter"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="false"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow"
                     SourceName="PART_Popup"
                     Value="true">
                <Setter Property="Margin"
                        TargetName="shadow"
                        Value="0,0,5,5" />
                <Setter Property="Color"
                        TargetName="shadow"
                        Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems"
                     Value="false">
                <Setter Property="Height"
                        TargetName="dropDownBorder"
                        Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping"
                               Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll"
                        Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll"
                     SourceName="DropDownScrollViewer"
                     Value="false">
                <Setter Property="Canvas.Top"
                        TargetName="opaqueRect"
                        Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left"
                        TargetName="opaqueRect"
                        Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- ComboBox White -->
    <Style x:Key="ComboBoxCategoryStyle"
           TargetType="{x:Type ComboBox}">
        <Setter Property="Template"
                Value="{StaticResource ComboBoxCategoryStyle.Template}" />
        <Style.Triggers>
            <Trigger Property="IsEditable"
                     Value="true">
                <Setter Property="IsTabStop"
                        Value="false" />
                <Setter Property="Padding"
                        Value="2" />
            </Trigger>
        </Style.Triggers>
    </Style>





    <!--///////////////////////////////////////////////////////////////////////////////////////////////////////////////
         Template Custom
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////-->

    <!--/////////////////////////////////////
         Main Window 
        /////////////////////////////////////-->

    <!--<LinearGradientBrush x:Key="MainWindow.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FF076d52" Offset="0.0"/>
        <GradientStop Color="#FF055d4a" Offset="1.0"/>
    </LinearGradientBrush>-->

    <LinearGradientBrush x:Key="MainWindow.Static.Background"
                         StartPoint="0.5,0"
                         EndPoint="0.5,1"
                         SpreadMethod="Pad"
                         ColorInterpolationMode="SRgbLinearInterpolation">
        <GradientStop Color="#FF055D4A"
                      Offset="1" />
        <GradientStop Color="#FF076D52"
                      Offset="0.75" />
    </LinearGradientBrush>

    <!-- Main Window Style Custom -->
    <Style x:Key="WindowStyle"
           TargetType="{x:Type Window}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <!--Background-->
        <Setter Property="Background"
                Value="{DynamicResource MainWindow.Static.Background}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode"
                     Value="CanResizeWithGrip">
                <Setter Property="Template"
                        Value="{StaticResource WindowTemplateKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Configure Window -->
    <Style x:Key="WindowConfigure"
           TargetType="{x:Type Window}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <!--Background-->
        <Setter Property="Background"
                Value="#FF076d52" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode"
                     Value="CanResizeWithGrip">
                <Setter Property="Template"
                        Value="{StaticResource WindowTemplateKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Crop Window -->
    <Style x:Key="WindowCrop"
           TargetType="{x:Type Window}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <!--Background-->
        <Setter Property="Background"
                Value="#FF076d52" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode"
                     Value="CanResizeWithGrip">
                <Setter Property="Template"
                        Value="{StaticResource WindowTemplateKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Optimize Advanced -->
    <Style x:Key="WindowOptimizeAdvanced"
           TargetType="{x:Type Window}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <!--Background-->
        <Setter Property="Background"
                Value="#FF076d52" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode"
                     Value="CanResizeWithGrip">
                <Setter Property="Template"
                        Value="{StaticResource WindowTemplateKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Log Console -->
    <Style x:Key="WindowLogConsole"
           TargetType="{x:Type Window}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <!--Background-->
        <Setter Property="Background"
                Value="#FF054536" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode"
                     Value="CanResizeWithGrip">
                <Setter Property="Template"
                        Value="{StaticResource WindowTemplateKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Debug Console -->
    <Style x:Key="WindowDebugConsole"
           TargetType="{x:Type Window}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <!--Background-->
        <Setter Property="Background"
                Value="#FF054536" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <AdornerDecorator>
                            <ContentPresenter />
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode"
                     Value="CanResizeWithGrip">
                <Setter Property="Template"
                        Value="{StaticResource WindowTemplateKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--/////////////////////////////////////
     ComboBox Custom
    /////////////////////////////////////-->
    <!-- Static -->
    <SolidColorBrush x:Key="ComboBoxStyle.Static.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="ComboBoxStyle.Static.Border"
                     Color="#FFad8a4a" />

    <!-- Disabled-->
    <SolidColorBrush x:Key="ComboBoxStyle.Disabled.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="ComboBoxStyle.Disabled.Border"
                     Color="#FF054536" />

    <!-- Mouse Over-->
    <SolidColorBrush x:Key="ComboBoxStyle.MouseOver.Border.Background"
                     Color="#FFad8a4a" />

    <!-- Editable-->
    <SolidColorBrush x:Key="ComboBoxStyle.Editable.Foreground"
                     Color="#FFFFFFFF" />
    <!-- <SolidColorBrush x:Key="ComboBoxStyleStaticEditableBackground" Color="#FFad8a4a"/> -->



    <!--/////////////////////////////////////
          TextBox Custom
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="TextBoxStyle.Static.Background"
                     Color="#FF06503f" />
    <SolidColorBrush x:Key="TextBoxStyle.Static.Border"
                     Color="#FFad8a4a" />

    <SolidColorBrush x:Key="TextBoxStyle.Disabled.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="TextBoxStyle.Disabled.Foreground"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="TextBoxStyle.Disabled.Border"
                     Color="#FFb4b4b4" />

    <SolidColorBrush x:Key="TextBoxStyle.MouseOver.Border"
                     Color="#FFeeeeee" />
    <SolidColorBrush x:Key="TextBoxStyle.Focus.Border"
                     Color="#FFeeeeee" />

    <Style x:Key="TextBoxStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TextBoxStyle.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <!-- TextBox Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- Enabled / Disabled TextBox Colors & Opacity -->
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="#FFFFFFFF" />
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxStyle.Static.Background}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxStyle.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxStyle.Focus.Border}" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    TargetName="border"
                                    Value="1.00" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource TextBoxStyle.Disabled.Foreground}" />
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxStyle.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxStyle.Disabled.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled"
                               Value="true" />
                    <Condition Property="IsSelectionActive"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush"
                        Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>



    <!--/////////////////////////////////////
          TextBox Cut
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="TextBoxCut.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="TextBoxCut.Disabled.Foreground"
                     Color="#FFb4b4b4" />

    <SolidColorBrush x:Key="TextBoxCut.Static.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="TextBoxCut.Disabled.Background"
                     Color="Transparent" />

    <SolidColorBrush x:Key="TextBoxCut.Static.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="TextBoxCut.Disabled.Border"
                     Color="Transparent" />

    <SolidColorBrush x:Key="TextBoxCut.MouseOver.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="TextBoxCut.Focus.Border"
                     Color="Transparent" />

    <Style x:Key="TextBoxCut"
           TargetType="{x:Type TextBox}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TextBoxCut.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <!-- TextBox Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- Enabled / Disabled TextBox Colors & Opacity -->
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="{StaticResource TextBoxCut.Static.Foreground}" />
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxCut.Static.Background}" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxCut.Static.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    TargetName="border"
                                    Value="1.00" />
                            <Setter Property="Foreground"
                                    Value="{StaticResource TextBoxCut.Disabled.Foreground}" />
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxCut.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxCut.Disabled.Border}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxCut.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxCut.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled"
                               Value="true" />
                    <Condition Property="IsSelectionActive"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush"
                        Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--/////////////////////////////////////
         Label Cut
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="LabelCut.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="LabelCut.Disabled.Foreground"
                     Color="#FFb4b4b4" />

    <Style x:Key="LabelCut"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource LabelCut.Static.Foreground}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="5" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="VerticalContentAlignment"
                Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="{StaticResource LabelCut.Static.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{StaticResource LabelCut.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--/////////////////////////////////////
          TextBox Browse Custom
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="TextBoxBrowseStyle.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="TextBoxBrowseStyle.Static.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="TextBoxBrowseStyle.Static.Border"
                     Color="#FFAAAAAA" />

    <SolidColorBrush x:Key="TextBoxBrowseStyle.Disabled.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="TextBoxBrowseStyle.Disabled.Border"
                     Color="#FFb4b4b4" />

    <SolidColorBrush x:Key="TextBoxBrowseStyle.MouseOver.Border"
                     Color="#FFEEEEEE" />
    <SolidColorBrush x:Key="TextBoxBrowseStyle.Focus.Border"
                     Color="#FFEEEEEE" />


    <Style x:Key="TextBoxBrowseStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TextBoxBrowseStyle.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="CaretBrush"
                Value="{DynamicResource TextBoxBrowseStyle.Static.Foreground}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <!-- TextBox Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- Enabled / Disabled TextBox Colors & Opacity -->
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="{StaticResource TextBoxBrowseStyle.Static.Foreground}" />
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxBrowseStyle.Static.Background}" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxBrowseStyle.Static.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxBrowseStyle.Disabled.Background}" />
                            <Setter Property="Opacity"
                                    TargetName="border"
                                    Value="0.50" />
                            <Setter Property="Foreground"
                                    Value="DarkGray" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxBrowseStyle.Disabled.Border}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxBrowseStyle.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxBrowseStyle.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled"
                               Value="true" />
                    <Condition Property="IsSelectionActive"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush"
                        Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--/////////////////////////////////////
          TextBox Settings Custom
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="TextBoxSettingsStyle.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="TextBoxSettingsStyle.Static.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="TextBoxSettingsStyle.Static.Border"
                     Color="Transparent" />

    <SolidColorBrush x:Key="TextBoxSettingsStyle.Disabled.Background"
                     Color="#FF054536" />

    <SolidColorBrush x:Key="TextBoxSettingsStyle.MouseOver.Border"
                     Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="TextBoxSettingsStyle.Focus.Border"
                     Color="#FF569DE5" />

    <Style x:Key="TextBoxSettingsStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TextBoxSettingsStyle.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="CaretBrush"
                Value="{DynamicResource TextBoxSettingsStyle.Static.Foreground}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <!-- TextBox Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- Enabled / Disabled TextBox Colors & Opacity -->
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="{StaticResource TextBoxSettingsStyle.Static.Foreground}" />
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxSettingsStyle.Static.Background}" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxSettingsStyle.Static.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxSettingsStyle.Disabled.Background}" />
                            <Setter Property="Opacity"
                                    TargetName="border"
                                    Value="0.6" />
                            <Setter Property="Foreground"
                                    Value="#FFFFFFFF" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxSettingsStyle.Static.Border}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxSettingsStyle.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxSettingsStyle.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled"
                               Value="true" />
                    <Condition Property="IsSelectionActive"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush"
                        Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--/////////////////////////////////////
     ComboBox Glyph Custom
    /////////////////////////////////////-->
    <SolidColorBrush x:Key="ComboBoxStyle.Static.Glyph"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBoxStyle.MouseOver.Glyph"
                     Color="#FFFFFFFF" />


    <Style x:Key="ComboBoxCategoryStyle.Editable.TextBox"
           TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="MinHeight"
                Value="0" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ComboBox Custom Toggle Button -->
    <Style x:Key="ComboBoxStyle.ToggleButton"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="ClickMode"
                Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot"
                            SnapsToDevicePixels="true">
                        <!-- BorderBrush="{StaticResource ComboBoxStyle.Static.Border}" BorderThickness="{StaticResource Border.Static.Thickness.None} Background="{StaticResource ComboBoxStyle.Static.Background}"" -->
                        <Border x:Name="splitBorder"
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                HorizontalAlignment="Right"
                                Margin="0"
                                SnapsToDevicePixels="true"
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow"
                                  Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                  Fill="{StaticResource ComboBoxStyle.Static.Glyph}"
                                  HorizontalAlignment="Center"
                                  Margin="0"
                                  VerticalAlignment="Center" />

                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Static.Editable.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Static.Editable.Border}" />
                            <Setter Property="Background"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource ComboBoxStyle.MouseOver.Glyph}" />
                        </Trigger>
                        <!-- Mouse Over False -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <!-- Background Image -->
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBoxStyle.Static.Background}" />
                            <!-- Mouse Over Border Color -->
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="Transparent" />
                            <!-- Mouse Over Border Thickness -->
                            <Setter Property="BorderThickness"
                                    TargetName="templateRoot"
                                    Value="0" />
                        </MultiDataTrigger>
                        <!-- Mouse Over True -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <!-- Mouse Over Background Image -->
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBoxStyle.MouseOver.Border.Background}" />
                            <!-- Mouse Over Border Color -->
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Border}" />
                            <!-- Mouse Over Border Thickness -->
                            <Setter Property="BorderThickness"
                                    TargetName="templateRoot"
                                    Value="0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Border}" />
                            <Setter Property="Background"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource ComboBox.Pressed.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Border}" />
                            <Setter Property="Background"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Fill"
                                    TargetName="arrow"
                                    Value="{StaticResource ComboBox.Disabled.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <!-- Disabled Background Image -->
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBoxStyle.Disabled.Background}">
                            </Setter>
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBoxStyle.Disabled.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="templateRoot"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Border}" />
                            <Setter Property="Background"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="splitBorder"
                                    Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ComboBox Custom Item Template -->
    <ControlTemplate x:Key="ComboBoxStyle.Item.ControlTemplate"
                     TargetType="{x:Type ComboBoxItem}">
        <Border x:Name="Bd"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="True">
            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="TextElement.Foreground"
                        TargetName="Bd"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <!-- Background Mouse Over Not Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="False" />
                    <Condition Property="IsMouseOver"
                               Value="True" />
                    <Condition Property="IsKeyboardFocused"
                               Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FF054536" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#A8054536" />
            </MultiTrigger>
            <!-- Background Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="True" />
                    <Condition Property="IsMouseOver"
                               Value="False" />
                    <Condition Property="IsKeyboardFocused"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFad8a4a" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFad8a4a" />
            </MultiTrigger>
            <!-- Background Mouse Over Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="True" />
                    <Condition Property="IsMouseOver"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
            </MultiTrigger>
            <!-- Background Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="True" />
                    <Condition Property="IsMouseOver"
                               Value="False" />
                    <Condition Property="IsKeyboardFocused"
                               Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFad8a4a" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFad8a4a" />
            </MultiTrigger>
            <!-- Background Not Selected Keyboard Focused -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="False" />
                    <Condition Property="IsMouseOver"
                               Value="False" />
                    <Condition Property="IsKeyboardFocused"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
            </MultiTrigger>
            <!-- Background Mouse Over Not Selected Keyboard Focused -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"
                               Value="False" />
                    <Condition Property="IsMouseOver"
                               Value="True" />
                    <Condition Property="IsKeyboardFocused"
                               Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
                <Setter Property="BorderBrush"
                        TargetName="Bd"
                        Value="#FFb4b4b4" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- ComboBox Custom Item -->
    <Style x:Key="ComboBoxStyleItem"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Template"
                Value="{StaticResource ComboBoxStyle.Item.ControlTemplate}" />
        <Setter Property="Foreground"
                Value="#FFFFFFFF" />
        <Setter Property="Background"
                Value="#FFad8a4a" />
        <Setter Property="BorderBrush"
                Value="#FFad8a4a" />
        <Style.Triggers>
            <Trigger Property="IsSelected"
                     Value="true">
                <Setter Property="Background"
                        Value="#FFad8a4a" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- ComboBox Custom Template -->
    <ControlTemplate x:Key="ComboBoxStyle.Template"
                     TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot"
              SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow"
                                               Color="Transparent"
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder"
                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                            BorderThickness="1"
                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid"
                                  RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                        HorizontalAlignment="Left"
                                        Height="0"
                                        VerticalAlignment="Top"
                                        Width="0">
                                    <Rectangle x:Name="opaqueRect"
                                               Fill="{Binding Background, ElementName=dropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}"
                          Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxStyle.ToggleButton}" />
            <ContentPresenter x:Name="contentPresenter"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="false"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow"
                     SourceName="PART_Popup"
                     Value="true">
                <Setter Property="Margin"
                        TargetName="shadow"
                        Value="0,0,5,5" />
                <Setter Property="Color"
                        TargetName="shadow"
                        Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems"
                     Value="false">
                <Setter Property="Height"
                        TargetName="dropDownBorder"
                        Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping"
                               Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll"
                        Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll"
                     SourceName="DropDownScrollViewer"
                     Value="false">
                <Setter Property="Canvas.Top"
                        TargetName="opaqueRect"
                        Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left"
                        TargetName="opaqueRect"
                        Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
            <!-- Enabled Foreground Text -->
            <Trigger Property="IsEnabled"
                     Value="true">
                <Setter Property="Foreground"
                        Value="#FFFFFFFF" />
            </Trigger>
            <!-- Disabled Foreground Text -->
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{StaticResource ComboBox.Disabled.Foreground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ComboBox Custom Textbox -->
    <Style x:Key="ComboBox.Editable.TextBoxStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="MinHeight"
                Value="0" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ComboBox Custom Editable Template-->
    <ControlTemplate x:Key="ComboBoxStyle.Editable.Template"
                     TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot"
              SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="shadow"
                                               Color="Transparent"
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="dropDownBorder"
                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                            BorderThickness="1"
                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid"
                                  RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                        HorizontalAlignment="Left"
                                        Height="0"
                                        VerticalAlignment="Top"
                                        Width="0">
                                    <Rectangle x:Name="opaqueRect"
                                               Fill="{Binding Background, ElementName=dropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}"
                          Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxStyle.ToggleButton}" />
            <Border x:Name="border"
                    Background="{StaticResource TextBoxStyle.Static.Background}"
                    Margin="{TemplateBinding BorderThickness}">
                <TextBox x:Name="PART_EditableTextBox"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Margin="{TemplateBinding Padding}"
                         Style="{StaticResource ComboBox.Editable.TextBox}"
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEditable"
                     Value="true">
                <Setter Property="Foreground"
                        Value="#FFFFFFFF" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Opacity"
                        TargetName="border"
                        Value="0.56" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin"
                     Value="true">
                <Setter Property="Foreground"
                        Value="#FFFFFFFF" />
            </Trigger>
            <Trigger Property="HasDropShadow"
                     SourceName="PART_Popup"
                     Value="true">
                <Setter Property="Margin"
                        TargetName="shadow"
                        Value="0,0,5,5" />
                <Setter Property="Color"
                        TargetName="shadow"
                        Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems"
                     Value="false">
                <Setter Property="Height"
                        TargetName="dropDownBorder"
                        Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping"
                               Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll"
                        Value="false" />
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll"
                     SourceName="DropDownScrollViewer"
                     Value="false">
                <Setter Property="Canvas.Top"
                        TargetName="opaqueRect"
                        Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter Property="Canvas.Left"
                        TargetName="opaqueRect"
                        Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="ComboBoxEditableTextBox"
           TargetType="{x:Type TextBox}">
        <!-- ComboBox Editable Foreground Color-->
        <Setter Property="Foreground"
                Value="#FFFFFFFF" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="MinHeight"
                Value="0" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ComboBox Custom -->
    <Style x:Key="ComboBoxStyle"
           TargetType="{x:Type ComboBox}">
        <Setter Property="Template"
                Value="{StaticResource ComboBoxStyle.Template}" />
        <Style.Triggers>
            <Trigger Property="IsEditable"
                     Value="true">
                <Setter Property="IsTabStop"
                        Value="false" />
                <Setter Property="Padding"
                        Value="2" />
                <Setter Property="Template"
                        Value="{StaticResource ComboBoxStyle.Editable.Template}" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--/////////////////////////////////////
         TextBlock Custom
        /////////////////////////////////////-->
    <Style x:Key="TextBlockStyle"
           TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground"
                Value="#FFFFFFFF" />
        <Setter Property="TextWrapping"
                Value="NoWrap" />
        <Setter Property="TextTrimming"
                Value="None" />
    </Style>


    <!--/////////////////////////////////////
        Button Custom
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="Button.Static.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Button.Static.Border"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Button.MouseOver.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Button.MouseOver.Border"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.Pressed.Background"
                     Color="#FFDDDDDD" />
    <SolidColorBrush x:Key="Button.Pressed.Border"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="Button.Disabled.Background"
                     Color="#FFbcbcbc" />
    <SolidColorBrush x:Key="Button.Disabled.Border"
                     Color="#FFbcbcbc" />
    <SolidColorBrush x:Key="Button.Disabled.Foreground"
                     Color="#FF076d52" />

    <Style x:Key="ButtonStyle"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource Button.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.Small.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--/////////////////////////////////////
        Button Small Custom
        /////////////////////////////////////-->
    <!-- <SolidColorBrush x:Key="Button.Static.Background" Color="Transparent"/> -->
    <SolidColorBrush x:Key="Button.Small.Static.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.Small.Static.Border"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.Small.MouseOver.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.Small.MouseOver.Border"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="Button.Small.Pressed.Background"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="Button.Small.Pressed.Border"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="Button.Small.Disabled.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.Small.Disabled.Border"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="Button.Small.Disabled.Foreground"
                     Color="#FFb4b4b4" />

    <Style x:Key="ButtonSmallStyle"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource Button.Small.MouseOver.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.Small.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Small.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Small.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Small.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Small.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Small.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Small.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.Small.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--/////////////////////////////////////
        Button Navigation
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="Button.Nav.Static.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="Button.Nav.Static.Border"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="Button.Nav.Static.Foreground"
                     Color="#FFFFFFFF" />

    <SolidColorBrush x:Key="Button.Nav.MouseOver.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="Button.Nav.MouseOver.Border"
                     Color="#FFad8a4a" />

    <SolidColorBrush x:Key="Button.Nav.Pressed.Background"
                     Color="#FF076d52" />
    <SolidColorBrush x:Key="Button.Nav.Pressed.Border"
                     Color="#FFad8a4a" />

    <SolidColorBrush x:Key="Button.Nav.Disabled.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Nav.Disabled.Border"
                     Color="#FF555555" />
    <SolidColorBrush x:Key="Button.Nav.Disabled.Foreground"
                     Color="#FF555555" />

    <Style x:Key="ButtonNavigationStyle"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource Button.Nav.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.Nav.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource Button.Nav.Static.Foreground}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Nav.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Nav.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Nav.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Nav.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Nav.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Nav.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.Nav.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--/////////////////////////////////////
        Button Custom Crop
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="Button.Crop.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Button.Crop.Static.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.Crop.Static.Border"
                     Color="#FFAAAAAA" />

    <SolidColorBrush x:Key="Button.Crop.MouseOver.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.Crop.MouseOver.Border"
                     Color="#FFAAAAAA" />

    <SolidColorBrush x:Key="Button.Crop.Pressed.Background"
                     Color="#FFC4E5F6" />
    <SolidColorBrush x:Key="Button.Crop.Pressed.Border"
                     Color="#FF2C628B" />

    <SolidColorBrush x:Key="Button.Crop.Disabled.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="Button.Crop.Disabled.Border"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="Button.Crop.Disabled.Foreground"
                     Color="#FF054536" />

    <Style x:Key="ButtonCropStyle"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource Button.Crop.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.Crop.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource Button.Crop.Static.Foreground}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <!-- BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" -->
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <!-- Border Thickness Change On MouseOver -->
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver"
                                             Value="True">
                                        <Setter Property="BorderThickness"
                                                Value="1" />
                                        <Setter Property="BorderBrush"
                                                Value="{StaticResource Button.Crop.MouseOver.Border}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver"
                                             Value="False">
                                        <Setter Property="BorderThickness"
                                                Value="0" />
                                        <Setter Property="BorderBrush"
                                                Value="{StaticResource Button.Crop.Disabled.Border}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Crop.MouseOver.Background}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Crop.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Crop.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Crop.Disabled.Background}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.Crop.Disabled.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Crop.Static.Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--/////////////////////////////////////
        Crop Button TextBlock
        /////////////////////////////////////-->
    <Style x:Key="ButtonCropTextBlock"
           TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping"
                Value="NoWrap" />
        <Setter Property="TextTrimming"
                Value="None" />

        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="TextElement.Foreground"
                        Value="#FFA9A9A9" />
            </Trigger>
        </Style.Triggers>

    </Style>


    <!-- Button Custom Crop Clear -->
    <SolidColorBrush x:Key="Button.CropClear.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="Button.CropClear.Static.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.CropClear.Static.Border"
                     Color="#FFAAAAAA" />

    <SolidColorBrush x:Key="Button.CropClear.MouseOver.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.CropClear.MouseOver.Border"
                     Color="#FFAAAAAA" />

    <SolidColorBrush x:Key="Button.CropClear.Pressed.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.CropClear.Pressed.Border"
                     Color="#FFad8a4a" />

    <SolidColorBrush x:Key="Button.CropClear.Disabled.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="Button.CropClear.Disabled.Border"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="Button.CropClear.Disabled.Foreground"
                     Color="DarkGray" />

    <Style x:Key="ButtonCropClear"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource Button.CropClear.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.CropClear.Static.Border}" />
        <Setter Property="Foreground"
                Value="{StaticResource Button.CropClear.Static.Foreground}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <!-- BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" -->
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        <!-- Border Thickness Change On MouseOver -->
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver"
                                             Value="True">
                                        <Setter Property="BorderThickness"
                                                Value="1" />
                                        <Setter Property="BorderBrush"
                                                Value="{StaticResource Button.Crop.MouseOver.Border}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver"
                                             Value="False">
                                        <Setter Property="BorderThickness"
                                                Value="0" />
                                        <Setter Property="BorderBrush"
                                                Value="{StaticResource Button.Crop.Disabled.Border}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.CropClear.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.CropClear.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.CropClear.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.CropClear.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.CropClear.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.CropClear.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.Crop.Disabled.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.CropClear.Static.Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--/////////////////////////////////////
        Button Folder
        /////////////////////////////////////-->
    <Style x:Key="ButtonFolder">
    </Style>



    <!--/////////////////////////////////////
        Button Folder Custom
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="Button.FolderStyle.Static.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.FolderStyle.Static.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.FolderStyle.MouseOver.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.FolderStyle.MouseOver.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.FolderStyle.Pressed.Background"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="Button.FolderStyle.Pressed.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.FolderStyle.Disabled.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.FolderStyle.Disabled.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.FolderStyle.Disabled.Foreground"
                     Color="DarkGray" />

    <Style x:Key="ButtonFolderStyle"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource Button.FolderStyle.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.FolderStyle.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.FolderStyle.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.FolderStyle.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.FolderStyle.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.FolderStyle.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    Value="0.8" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.FolderStyle.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.FolderStyle.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.FolderStyle.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--/////////////////////////////////////
         Button Custom Volume
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="Button.Volume.Static.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Volume.Disabled.Background"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Volume.MouseOver.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="Button.Volume.Static.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Volume.Disabled.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Volume.MouseOver.Border"
                     Color="Transparent" />

    <Style x:Key="ButtonVolume"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource Button.Small.MouseOver.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.Small.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Volume.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Volume.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Small.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Small.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{StaticResource Button.Volume.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource Button.Volume.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--/////////////////////////////////////
         Toggle Button Custom
        /////////////////////////////////////-->
    <Style x:Key="ToggleButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="#FFad8a4a" />
        <Setter Property="Foreground"
                Value="#FFFFFFFF" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="Transparent" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="#FFb4b4b4" />
                            <Setter Property="Cursor"
                                    Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="#FFb4b4b4" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="#FFb4b4b4" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="#FFad8a4a" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="#FFb4b4b4" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="#FFFFFFFF" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--/////////////////////////////////////
         VBR Toggle Button Custom
        /////////////////////////////////////-->
    <Style x:Key="ToggleButtonVBR"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="#FFad8a4a" />
        <Setter Property="BorderBrush"
                Value="#FFad8a4a" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="#FFad8a4a" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="#FFad8a4a" />
                            <Setter Property="Cursor"
                                    Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="#FFad8a4a" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="#FFad8a4a" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="#FFad8a4a" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="#FFad8a4a" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="#FFFFFFFF" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--/////////////////////////////////////
      Toggle Button Small Custom
    /////////////////////////////////////-->
    <SolidColorBrush x:Key="ToggleButton.Small.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ToggleButton.Small.Static.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="ToggleButton.Small.Static.Border"
                     Color="#FFb4b4b4" />

    <SolidColorBrush x:Key="ToggleButton.Small.Checked.Background"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="ToggleButton.Small.Checked.Border"
                     Color="#FFb4b4b4" />

    <SolidColorBrush x:Key="ToggleButton.Small.Unchecked.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="ToggleButton.Small.Unchecked.Border"
                     Color="#FFad8a4a" />

    <SolidColorBrush x:Key="ToggleButton.Small.MouseOver.Unchecked.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="ToggleButton.Small.MouseOver.Unchecked.Border"
                     Color="#FFb4b4b4" />

    <SolidColorBrush x:Key="ToggleButton.Small.MouseOver.Checked.Background"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="ToggleButton.Small.MouseOver.Checked.Border"
                     Color="#FFb4b4b4" />

    <SolidColorBrush x:Key="ToggleButton.Small.MouseOver.Background"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="ToggleButton.Small.MouseOver.Border"
                     Color="#FFad8a4a" />

    <SolidColorBrush x:Key="ToggleButton.Small.Pressed.Background"
                     Color="#FFb4b4b4" />
    <SolidColorBrush x:Key="ToggleButton.Small.Pressed.Border"
                     Color="#FFb4b4b4" />

    <SolidColorBrush x:Key="ToggleButton.Small.Disabled.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="ToggleButton.Small.Disabled.Border"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="ToggleButton.Small.Disabled.Foreground"
                     Color="#FFb4b4b4" />

    <Style x:Key="ToggleButtonSmall"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="#FFad8a4a" />
        <Setter Property="BorderBrush"
                Value="#FFad8a4a" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            SnapsToDevicePixels="true">
                        <!-- BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness} Background="{TemplateBinding Background}""-->
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        <!-- Border Thickness Change On MouseOver -->
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver"
                                             Value="True">
                                        <Setter Property="BorderThickness"
                                                Value="1" />
                                        <Setter Property="BorderBrush"
                                                Value="{StaticResource ToggleButton.Small.MouseOver.Border}" />
                                    </Trigger>
                                    <Trigger Property="IsMouseOver"
                                             Value="False">
                                        <Setter Property="BorderThickness"
                                                Value="1" />
                                        <Setter Property="BorderBrush"
                                                Value="{StaticResource ToggleButton.Small.Disabled.Border}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>

                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Default -->
                        <Trigger Property="Button.IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <!-- Pressed -->
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Pressed.Border}" />
                        </Trigger>
                        <!-- Enabled -->
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Static.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Unchecked.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ToggleButton.Small.Static.Foreground}" />
                        </Trigger>
                        <!-- Checked -->
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Checked.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Checked.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ToggleButton.Small.Static.Foreground}" />
                        </Trigger>
                        <!-- Unchecked -->
                        <Trigger Property="IsChecked"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Unchecked.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Unchecked.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ToggleButton.Small.Static.Foreground}" />
                        </Trigger>
                        <!-- Mouse Over -->
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource ToggleButton.Small.MouseOver.Border}" />
                            <Setter Property="Cursor"
                                    Value="Hand" />
                        </Trigger>
                        <!-- Is Mouse Over & Checked -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.MouseOver.Checked.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.MouseOver.Checked.Border}" />
                        </MultiDataTrigger>
                        <!-- Is Mouse Over & Unchecked -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.MouseOver.Unchecked.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.MouseOver.Unchecked.Border}" />
                        </MultiDataTrigger>
                        <!-- Disabled -->
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{DynamicResource ToggleButton.Small.Disabled.Border}" />
                            <Setter Property="TextElement.Foreground"
                                    TargetName="contentPresenter"
                                    Value="{StaticResource ToggleButton.Small.Disabled.Foreground}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--/////////////////////////////////////
           Volume Button Glyph
        /////////////////////////////////////-->
    <!--<Style x:Key="VolumeButtonGlyph" TargetType="{x:Type Image}">
        <Setter Property="FlowDirection" Value="LeftToRight"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->


    <!--/////////////////////////////////////
        CheckBox Custom
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="OptionMark.Static.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="OptionMark.Static.Border"
                     Color="#FF707070" />
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background"
                     Color="#FFF3F9FF" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph"
                     Color="#FF212121" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Background"
                     Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Border"
                     Color="#FFBCBCBC" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph"
                     Color="#FF707070" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Background"
                     Color="#FFD9ECFF" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Border"
                     Color="#FF3C77DD" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph"
                     Color="#FF212121" />
    <SolidColorBrush x:Key="OptionMark.Static.Glyph"
                     Color="#FF212121" />
    <Style x:Key="CheckBoxStyle"
           TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Background"
                Value="{StaticResource OptionMark.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource OptionMark.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot"
                          Background="Transparent"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark"
                                      Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                      Fill="{StaticResource OptionMark.Static.Glyph}"
                                      Margin="1"
                                      Opacity="0"
                                      Stretch="None" />
                                <Rectangle x:Name="indeterminateMark"
                                           Fill="{StaticResource OptionMark.Static.Glyph}"
                                           Margin="2"
                                           Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                                          Grid.Column="1"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent"
                                 Value="true">
                            <Setter Property="FocusVisualStyle"
                                    Value="{StaticResource OptionMarkFocusVisual}" />
                            <Setter Property="Padding"
                                    Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.MouseOver.Border}" />
                            <Setter Property="Fill"
                                    TargetName="optionMark"
                                    Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                            <Setter Property="Fill"
                                    TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Disabled.Border}" />
                            <Setter Property="Fill"
                                    TargetName="optionMark"
                                    Value="{StaticResource OptionMark.Disabled.Glyph}" />
                            <Setter Property="Fill"
                                    TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Pressed.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="checkBoxBorder"
                                    Value="{StaticResource OptionMark.Pressed.Border}" />
                            <Setter Property="Fill"
                                    TargetName="optionMark"
                                    Value="{StaticResource OptionMark.Pressed.Glyph}" />
                            <Setter Property="Fill"
                                    TargetName="indeterminateMark"
                                    Value="{StaticResource OptionMark.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Opacity"
                                    TargetName="optionMark"
                                    Value="1" />
                            <Setter Property="Opacity"
                                    TargetName="indeterminateMark"
                                    Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="{x:Null}">
                            <Setter Property="Opacity"
                                    TargetName="optionMark"
                                    Value="0" />
                            <Setter Property="Opacity"
                                    TargetName="indeterminateMark"
                                    Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--/////////////////////////////////////
        List View
        /////////////////////////////////////-->
    <!--Enabled-->
    <SolidColorBrush x:Key="ListView.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ListView.Static.Background"
                     Color="#FF054536" />
    <SolidColorBrush x:Key="ListView.Static.Border"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ListView.Selected.Foreground"
                     Color="#FFFFFFFF" />
    <!--Disabled-->
    <SolidColorBrush x:Key="ListView.Disabled.Foreground"
                     Color="#FF000000" />
    <SolidColorBrush x:Key="ListView.Disabled.Background"
                     Color="#FF000000" />
    <SolidColorBrush x:Key="ListView.Disabled.Border"
                     Color="#FF000000" />

    <Style x:Key="ListViewStyle"
           TargetType="{x:Type ListView}">
        <Setter Property="Background"
                Value="{DynamicResource ListView.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource ListView.Static.Border}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Foreground"
                Value="{StaticResource ListView.Static.Foreground}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Themes:ListBoxChrome x:Name="Bd"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                          Background="{TemplateBinding Background}"
                                          RenderMouseOver="{TemplateBinding IsMouseOver}"
                                          RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"
                                          SnapsToDevicePixels="true">
                        <ScrollViewer Padding="{TemplateBinding Padding}"
                                      Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Themes:ListBoxChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Background"
                                    Value="{DynamicResource ListView.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource ListView.Disabled.Border}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ListView.Disabled.Foreground}" />
                        </Trigger>
                        <!--<Trigger Property="IsSelected" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource ListView.Selected.Foreground}"/>
                        </Trigger>-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping"
                                           Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping"
                                           Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll"
                                    Value="false" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--/////////////////////////////////////
        List Item
        /////////////////////////////////////-->
    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border CornerRadius="0"
                            SnapsToDevicePixels="True"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">

                        <Border x:Name="InnerBorder"
                                CornerRadius="0"
                                BorderThickness="1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="11" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>

                                <Rectangle x:Name="UpperHighlight"
                                           Visibility="Collapsed"
                                           Fill="#75FFFFFF" />
                                <GridViewRowPresenter Grid.RowSpan="2"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="#FFad8a4a" />
                            <Setter TargetName="UpperHighlight"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="#FFFFFFFF" />
                            <Setter Property="Background"
                                    Value="#FFad8a4a" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--/////////////////////////////////////
          TextBox Script View
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="TextBoxScriptView.Static.Background"
                     Color="#FF0a171b" />
    <SolidColorBrush x:Key="TextBoxScriptView.Disabled.Background"
                     Color="#FF000000" />
    <SolidColorBrush x:Key="TextBoxScriptView.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="TextBoxScriptView.Static.Border"
                     Color="#FFABAdB3" />
    <SolidColorBrush x:Key="TextBoxScriptView.MouseOver.Border"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="TextBoxScriptView.Focus.Border"
                     Color="#FFad8a4a" />

    <Style x:Key="TextBoxScriptView"
           TargetType="{x:Type TextBox}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TextBoxScriptView.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="CaretBrush"
                Value="{DynamicResource TextBoxScriptView.Static.Foreground}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <!-- TextBox Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- Enabled / Disabled TextBox Colors & Opacity -->
                        <Trigger Property="IsEnabled"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="{StaticResource TextBoxScriptView.Static.Foreground}" />
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxScriptView.Static.Background}" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxScriptView.Static.Border}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    Value="{StaticResource TextBoxScriptView.Disabled.Background}" />
                            <Setter Property="Opacity"
                                    TargetName="border"
                                    Value="0.50" />
                            <Setter Property="Foreground"
                                    Value="#FFADD5FF" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource TextBoxScriptView.Static.Border}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxScriptView.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBoxScriptView.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled"
                               Value="true" />
                    <Condition Property="IsSelectionActive"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush"
                        Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <!--/////////////////////////////////////
        RichTextBox
        /////////////////////////////////////-->
    <SolidColorBrush x:Key="TextBox.Static.Background"
                     Color="#FF0a171b" />
    <SolidColorBrush x:Key="TextBox.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="TextBox.Static.Border"
                     Color="#FFABAdB3" />
    <SolidColorBrush x:Key="TextBox.MouseOver.Border"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="TextBox.Focus.Border"
                     Color="#FFad8a4a" />
    <Style x:Key="{x:Type TextBoxBase}"
           TargetType="{x:Type TextBoxBase}">
        <Setter Property="Background"
                Value="{DynamicResource TextBox.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TextBox.Static.Border}" />
        <Setter Property="Foreground"
                Value="{DynamicResource TextBox.Static.Foreground}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    TargetName="border"
                                    Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBox.MouseOver.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    TargetName="border"
                                    Value="{StaticResource TextBox.Focus.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled"
                               Value="true" />
                    <Condition Property="IsSelectionActive"
                               Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush"
                        Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type Hyperlink}"
           TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
        <Setter Property="TextDecorations"
                Value="Underline" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Foreground"
                        Value="Red" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="true">
                <Setter Property="Cursor"
                        Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RichTextBoxStyle"
           TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}"
                   TargetType="{x:Type FlowDocument}">
                <Setter Property="OverridesDefaultStyle"
                        Value="true" />
            </Style>
            <Style x:Key="{x:Type Hyperlink}"
                   BasedOn="{StaticResource {x:Type Hyperlink}}"
                   TargetType="{x:Type Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver"
                             Value="true">
                        <Setter Property="Foreground"
                                Value="Blue" />
                    </Trigger>
                    <Trigger Property="IsEnabled"
                             Value="false">
                        <Setter Property="Foreground"
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth"
                Value="10" />
        <Style.BasedOn>
            <StaticResource ResourceKey="{x:Type TextBoxBase}" />
        </Style.BasedOn>
    </Style>

    <!--/////////////////////////////////////
        Scrollbar
        /////////////////////////////////////-->

    <LinearGradientBrush x:Key="Scrollbar.Static.Background"
                         EndPoint="0,1"
                         StartPoint="0,0">
        <GradientStop Color="#FF054536"
                      Offset="0.0" />
        <GradientStop Color="#FF0a171b"
                      Offset="1.0" />
    </LinearGradientBrush>

    <!-- Background -->
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Background"
                Value="{DynamicResource Scrollbar.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource Scrollbar.Static.Background}" />
    </Style>


    <!--/////////////////////////////////////
        Scroll Viewer
        /////////////////////////////////////-->
    <!--<SolidColorBrush x:Key="ScrollViewer.Static.Background" Color="#FF000012"/>-->

    <LinearGradientBrush x:Key="ScrollViewer.Static.Background"
                         EndPoint="0,1"
                         StartPoint="0,0">
        <GradientStop Color="#FF054536"
                      Offset="0.0" />
        <GradientStop Color="#FF0a171b"
                      Offset="0.25" />
        <GradientStop Color="#FF0a171b"
                      Offset="0.5" />
        <GradientStop Color="#FF0a171b"
                      Offset="0.85" />
        <GradientStop Color="#FF054536"
                      Offset="1.0" />
    </LinearGradientBrush>

    <ControlTemplate x:Key="ScrollViewerControlTemplate"
                     TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid"
              Background="{DynamicResource ScrollViewer.Static.Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner"
                       Grid.Column="1"
                       Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                       Grid.Row="1" />
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                    CanHorizontallyScroll="False"
                                    CanVerticallyScroll="False"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    Content="{TemplateBinding Content}"
                                    Grid.Column="0"
                                    Margin="{TemplateBinding Padding}"
                                    Grid.Row="0" />
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       AutomationProperties.AutomationId="VerticalScrollBar"
                       Cursor="Arrow"
                       Grid.Column="1"
                       Maximum="{TemplateBinding ScrollableHeight}"
                       Minimum="0"
                       Grid.Row="0"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                       Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportHeight}" />
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       AutomationProperties.AutomationId="HorizontalScrollBar"
                       Cursor="Arrow"
                       Grid.Column="0"
                       Maximum="{TemplateBinding ScrollableWidth}"
                       Minimum="0"
                       Orientation="Horizontal"
                       Grid.Row="1"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportWidth}" />
        </Grid>
    </ControlTemplate>



    <!--/////////////////////////////////////
        Tab Control
        /////////////////////////////////////-->

    <SolidColorBrush x:Key="TabItem.Selected.Foreground"
                     Color="#FF000000" />
    <SolidColorBrush x:Key="TabItem.Selected.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="TabItem.Top.Selected.Border"
                     Color="#FFad8a4a" />
    <SolidColorBrush x:Key="TabItem.Selected.Border"
                     Color="#FF0080cb" />

    <Style x:Key="TabControlStyle"
           TargetType="{x:Type TabControl}">
        <Setter Property="Padding"
                Value="2" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Background"
                Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TabItem.Selected.Border}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot"
                          ClipToBounds="true"
                          SnapsToDevicePixels="true"
                          KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1"
                                              Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0"
                                           Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1"
                                           Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel"
                                  Background="Transparent"
                                  Grid.Column="0"
                                  IsItemsHost="true"
                                  Margin="2,2,2,0"
                                  Grid.Row="0"
                                  KeyboardNavigation.TabIndex="1"
                                  Panel.ZIndex="1" />
                        <Border x:Name="contentPanel"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Grid.Column="0"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="1"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement"
                                 Value="Bottom">
                            <Setter Property="Grid.Row"
                                    TargetName="headerPanel"
                                    Value="1" />
                            <Setter Property="Grid.Row"
                                    TargetName="contentPanel"
                                    Value="0" />
                            <Setter Property="Height"
                                    TargetName="RowDefinition0"
                                    Value="*" />
                            <Setter Property="Height"
                                    TargetName="RowDefinition1"
                                    Value="Auto" />
                            <Setter Property="Margin"
                                    TargetName="headerPanel"
                                    Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement"
                                 Value="Left">
                            <Setter Property="Grid.Row"
                                    TargetName="headerPanel"
                                    Value="0" />
                            <Setter Property="Grid.Row"
                                    TargetName="contentPanel"
                                    Value="0" />
                            <Setter Property="Grid.Column"
                                    TargetName="headerPanel"
                                    Value="0" />
                            <Setter Property="Grid.Column"
                                    TargetName="contentPanel"
                                    Value="1" />
                            <Setter Property="Width"
                                    TargetName="ColumnDefinition0"
                                    Value="Auto" />
                            <Setter Property="Width"
                                    TargetName="ColumnDefinition1"
                                    Value="*" />
                            <Setter Property="Height"
                                    TargetName="RowDefinition0"
                                    Value="*" />
                            <Setter Property="Height"
                                    TargetName="RowDefinition1"
                                    Value="0" />
                            <Setter Property="Margin"
                                    TargetName="headerPanel"
                                    Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement"
                                 Value="Right">
                            <Setter Property="Grid.Row"
                                    TargetName="headerPanel"
                                    Value="0" />
                            <Setter Property="Grid.Row"
                                    TargetName="contentPanel"
                                    Value="0" />
                            <Setter Property="Grid.Column"
                                    TargetName="headerPanel"
                                    Value="1" />
                            <Setter Property="Grid.Column"
                                    TargetName="contentPanel"
                                    Value="0" />
                            <Setter Property="Width"
                                    TargetName="ColumnDefinition0"
                                    Value="*" />
                            <Setter Property="Width"
                                    TargetName="ColumnDefinition1"
                                    Value="Auto" />
                            <Setter Property="Height"
                                    TargetName="RowDefinition0"
                                    Value="*" />
                            <Setter Property="Height"
                                    TargetName="RowDefinition1"
                                    Value="0" />
                            <Setter Property="Margin"
                                    TargetName="headerPanel"
                                    Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="TextElement.Foreground"
                                    TargetName="templateRoot"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--/////////////////////////////////////
        Tabbed Item
        /////////////////////////////////////-->

    <!-- Unselected -->
    <SolidColorBrush x:Key="TabItem.Static.Foreground"
                     Color="#FF000000" />
    <SolidColorBrush x:Key="TabItem.Static.Background"
                     Color="#FFF4F4F4" />
    <SolidColorBrush x:Key="TabItem.Static.Border"
                     Color="#FF999999" />

    <SolidColorBrush x:Key="TabItem.MouseOver.Background"
                     Color="#FFefefef" />
    <SolidColorBrush x:Key="TabItem.MouseOver.Border"
                     Color="#FFad8a4a" />

    <SolidColorBrush x:Key="TabItem.Disabled.Background"
                     Color="#FF555555" />
    <SolidColorBrush x:Key="TabItem.Disabled.Border"
                     Color="#FF555555" />

    <Style x:Key="TabItemStyle"
           TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground"
                Value="{StaticResource TabItem.Static.Foreground}" />
        <Setter Property="Background"
                Value="{StaticResource TabItem.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource TabItem.Static.Border}" />
        <Setter Property="Margin"
                Value="0" />
        <Setter Property="Padding"
                Value="6,2,6,2" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot"
                          SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,1,1,0"
                                Background="{TemplateBinding Background}"
                                Margin="0">
                            <Border x:Name="innerBorder"
                                    BorderBrush="{StaticResource TabItem.Top.Selected.Border}"
                                    BorderThickness="1,1,1,0"
                                    Background="{StaticResource TabItem.Selected.Background}"
                                    Margin="-1"
                                    Opacity="0" />
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentSource="Header"
                                          Focusable="False"
                                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,1,0,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,0,1,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="0,1,1,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.MouseOver.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,1,1,0" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity"
                                    TargetName="contentPresenter"
                                    Value="0.56" />
                            <Setter Property="Background"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,1,0,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity"
                                    TargetName="contentPresenter"
                                    Value="0.56" />
                            <Setter Property="Background"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,0,1,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity"
                                    TargetName="contentPresenter"
                                    Value="0.56" />
                            <Setter Property="Background"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="0,1,1,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity"
                                    TargetName="contentPresenter"
                                    Value="0.56" />
                            <Setter Property="Background"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Background}" />
                            <Setter Property="BorderBrush"
                                    TargetName="mainBorder"
                                    Value="{StaticResource TabItem.Disabled.Border}" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,1,1,0" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,1,0,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex"
                                    Value="1" />
                            <Setter Property="Margin"
                                    Value="-2,-2,0,-2" />
                            <Setter Property="Opacity"
                                    TargetName="innerBorder"
                                    Value="1" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,1,0,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,0,1,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground"
                                    Value="{StaticResource TabItem.Selected.Foreground}" />
                            <Setter Property="Panel.ZIndex"
                                    Value="1" />
                            <Setter Property="Margin"
                                    Value="-2,0,-2,-2" />
                            <Setter Property="Opacity"
                                    TargetName="innerBorder"
                                    Value="1" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,0,1,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="0,1,1,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex"
                                    Value="1" />
                            <Setter Property="Margin"
                                    Value="0,-2,-2,-2" />
                            <Setter Property="Opacity"
                                    TargetName="innerBorder"
                                    Value="1" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="0,1,1,1" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="false" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,1,1,0" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}"
                                           Value="true" />
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                                           Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex"
                                    Value="1" />
                            <Setter Property="Margin"
                                    Value="-2,-2,-2,0" />
                            <Setter Property="Opacity"
                                    TargetName="innerBorder"
                                    Value="1" />
                            <Setter Property="BorderThickness"
                                    TargetName="innerBorder"
                                    Value="1,1,1,0" />
                            <Setter Property="BorderThickness"
                                    TargetName="mainBorder"
                                    Value="1,1,1,0" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--///////////////////////////////////// 
        Slider
        /////////////////////////////////////-->

    <!-- Static -->
    <SolidColorBrush x:Key="SliderThumb.Static.Foreground"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="SliderThumb.Static.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="SliderThumb.Static.Border"
                     Color="#FFAAAAAA" />
    <SolidColorBrush x:Key="SliderThumb.Track.Border"
                     Color="#FF06503F" />
    <SolidColorBrush x:Key="SliderThumb.Track.Background"
                     Color="#FF06503F" />
    <!-- Mouse Over -->
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Background"
                     Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Border"
                     Color="#FFAD8A4A" />
    <!-- Pressed -->
    <SolidColorBrush x:Key="SliderThumb.Pressed.Background"
                     Color="#FFE2E2E2" />
    <SolidColorBrush x:Key="SliderThumb.Pressed.Border"
                     Color="#FFAD8A4A" />
    <!-- Disabled -->
    <SolidColorBrush x:Key="SliderThumb.Disabled.Background"
                     Color="#FF5F6567" />
    <SolidColorBrush x:Key="SliderThumb.Disabled.Border"
                     Color="#FF054536" />

    <ControlTemplate x:Key="SliderThumbHorizontalTop"
                     TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center"
              UseLayoutRounding="True"
              VerticalAlignment="Center">
            <Path x:Name="grip"
                  Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z"
                  Fill="{StaticResource SliderThumb.Static.Background}"
                  Stretch="Fill"
                  SnapsToDevicePixels="True"
                  Stroke="{StaticResource SliderThumb.Static.Border}"
                  StrokeThickness="1"
                  UseLayoutRounding="True"
                  VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalBottom"
                     TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center"
              UseLayoutRounding="True"
              VerticalAlignment="Center">
            <Path x:Name="grip"
                  Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z"
                  Fill="{StaticResource SliderThumb.Static.Background}"
                  Stretch="Fill"
                  SnapsToDevicePixels="True"
                  Stroke="{StaticResource SliderThumb.Static.Border}"
                  StrokeThickness="1"
                  UseLayoutRounding="True"
                  VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="RepeatButtonTransparent"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Focusable"
                Value="false" />
        <Setter Property="IsTabStop"
                Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Height="{TemplateBinding Height}"
                               Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="SliderThumbHorizontalDefault"
                     TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center"
              UseLayoutRounding="True"
              VerticalAlignment="Center">
            <Path x:Name="grip"
                  Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z"
                  Fill="{StaticResource SliderThumb.Static.Background}"
                  Stretch="Fill"
                  SnapsToDevicePixels="True"
                  Stroke="{StaticResource SliderThumb.Static.Border}"
                  StrokeThickness="1"
                  UseLayoutRounding="True"
                  VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderHorizontal"
                     TargetType="{x:Type Slider}">
        <Border x:Name="border"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto"
                                   MinHeight="{TemplateBinding MinHeight}" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick"
                         Fill="{TemplateBinding Foreground}"
                         Height="4"
                         Margin="0,0,0,2"
                         Placement="Top"
                         Grid.Row="0"
                         Visibility="Collapsed" />
                <TickBar x:Name="BottomTick"
                         Fill="{TemplateBinding Foreground}"
                         Height="4"
                         Margin="0,2,0,0"
                         Placement="Bottom"
                         Grid.Row="2"
                         Visibility="Collapsed" />
                <Border x:Name="TrackBackground"
                        BorderBrush="{StaticResource SliderThumb.Track.Border}"
                        BorderThickness="1"
                        Background="{StaticResource SliderThumb.Track.Background}"
                        Height="4.0"
                        Margin="5,0"
                        Grid.Row="1"
                        VerticalAlignment="center">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange"
                                   Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                   Height="4.0"
                                   Visibility="Hidden" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track"
                       Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                                      Style="{StaticResource RepeatButtonTransparent}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                                      Style="{StaticResource RepeatButtonTransparent}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb"
                               Focusable="False"
                               Height="18"
                               OverridesDefaultStyle="True"
                               Template="{StaticResource SliderThumbHorizontalDefault}"
                               VerticalAlignment="Center"
                               Width="11" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement"
                     Value="TopLeft">
                <Setter Property="Visibility"
                        TargetName="TopTick"
                        Value="Visible" />
                <Setter Property="Template"
                        TargetName="Thumb"
                        Value="{StaticResource SliderThumbHorizontalTop}" />
                <Setter Property="Margin"
                        TargetName="TrackBackground"
                        Value="5,2,5,0" />
            </Trigger>
            <Trigger Property="TickPlacement"
                     Value="BottomRight">
                <Setter Property="Visibility"
                        TargetName="BottomTick"
                        Value="Visible" />
                <Setter Property="Template"
                        TargetName="Thumb"
                        Value="{StaticResource SliderThumbHorizontalBottom}" />
                <Setter Property="Margin"
                        TargetName="TrackBackground"
                        Value="5,0,5,2" />
            </Trigger>
            <Trigger Property="TickPlacement"
                     Value="Both">
                <Setter Property="Visibility"
                        TargetName="TopTick"
                        Value="Visible" />
                <Setter Property="Visibility"
                        TargetName="BottomTick"
                        Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled"
                     Value="true">
                <Setter Property="Visibility"
                        TargetName="PART_SelectionRange"
                        Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused"
                     Value="true">
                <Setter Property="Foreground"
                        TargetName="Thumb"
                        Value="Blue" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalLeft"
                     TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center"
              UseLayoutRounding="True"
              VerticalAlignment="Center">
            <Path x:Name="grip"
                  Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z"
                  Fill="{StaticResource SliderThumb.Static.Background}"
                  Stretch="Fill"
                  Stroke="{StaticResource SliderThumb.Static.Border}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalRight"
                     TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center"
              UseLayoutRounding="True"
              VerticalAlignment="Center">
            <Path x:Name="grip"
                  Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z"
                  Fill="{StaticResource SliderThumb.Static.Background}"
                  Stretch="Fill"
                  Stroke="{StaticResource SliderThumb.Static.Border}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalDefault"
                     TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center"
              UseLayoutRounding="True"
              VerticalAlignment="Center">
            <Path x:Name="grip"
                  Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5z"
                  Fill="{StaticResource SliderThumb.Static.Background}"
                  Stretch="Fill"
                  Stroke="{StaticResource SliderThumb.Static.Border}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsDragging"
                     Value="true">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Pressed.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Fill"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Background}" />
                <Setter Property="Stroke"
                        TargetName="grip"
                        Value="{StaticResource SliderThumb.Disabled.Border}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderVertical"
                     TargetType="{x:Type Slider}">
        <Border x:Name="border"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}"
                                      Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick"
                         Grid.Column="0"
                         Fill="{TemplateBinding Foreground}"
                         Margin="0,0,2,0"
                         Placement="Left"
                         Visibility="Collapsed"
                         Width="4" />
                <TickBar x:Name="BottomTick"
                         Grid.Column="2"
                         Fill="{TemplateBinding Foreground}"
                         Margin="2,0,0,0"
                         Placement="Right"
                         Visibility="Collapsed"
                         Width="4" />
                <Border x:Name="TrackBackground"
                        BorderBrush="{StaticResource SliderThumb.Track.Border}"
                        BorderThickness="1"
                        Background="{StaticResource SliderThumb.Track.Background}"
                        Grid.Column="1"
                        HorizontalAlignment="center"
                        Margin="0,5"
                        Width="4.0">
                    <Canvas Margin="-1,-6">
                        <Rectangle x:Name="PART_SelectionRange"
                                   Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                   Visibility="Hidden"
                                   Width="4.0" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track"
                       Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                                      Style="{StaticResource RepeatButtonTransparent}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                                      Style="{StaticResource RepeatButtonTransparent}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb"
                               Focusable="False"
                               Height="11"
                               OverridesDefaultStyle="True"
                               Template="{StaticResource SliderThumbVerticalDefault}"
                               VerticalAlignment="Top"
                               Width="18" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement"
                     Value="TopLeft">
                <Setter Property="Visibility"
                        TargetName="TopTick"
                        Value="Visible" />
                <Setter Property="Template"
                        TargetName="Thumb"
                        Value="{StaticResource SliderThumbVerticalLeft}" />
                <Setter Property="Margin"
                        TargetName="TrackBackground"
                        Value="2,5,0,5" />
            </Trigger>
            <Trigger Property="TickPlacement"
                     Value="BottomRight">
                <Setter Property="Visibility"
                        TargetName="BottomTick"
                        Value="Visible" />
                <Setter Property="Template"
                        TargetName="Thumb"
                        Value="{StaticResource SliderThumbVerticalRight}" />
                <Setter Property="Margin"
                        TargetName="TrackBackground"
                        Value="0,5,2,5" />
            </Trigger>
            <Trigger Property="TickPlacement"
                     Value="Both">
                <Setter Property="Visibility"
                        TargetName="TopTick"
                        Value="Visible" />
                <Setter Property="Visibility"
                        TargetName="BottomTick"
                        Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled"
                     Value="true">
                <Setter Property="Visibility"
                        TargetName="PART_SelectionRange"
                        Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused"
                     Value="true">
                <Setter Property="Foreground"
                        TargetName="Thumb"
                        Value="Blue" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="SliderStyle"
           TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="Foreground"
                Value="{StaticResource SliderThumb.Static.Foreground}" />
        <Setter Property="Template"
                Value="{StaticResource SliderHorizontal}" />
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Vertical">
                <Setter Property="Template"
                        Value="{StaticResource SliderVertical}" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--/////////////////////////////////////
        White Icons
        /////////////////////////////////////-->

    <!-- Info Button -->
    <Style x:Key="ButtonInfo"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/info.png" />
    </Style>

    <!-- Website Button -->
    <Style x:Key="ButtonWebsite"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/web.png" />
    </Style>

    <!-- Update Button -->
    <Style x:Key="ButtonUpdate"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/update.png" />
    </Style>

    <!-- Configure Button -->
    <Style x:Key="ButtonConfigure"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/configuregear.png" />
    </Style>

    <!-- Window Button -->
    <Style x:Key="ButtonWindow"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/window.png" />
    </Style>

    <!-- Auto Sort Script Button -->
    <Style x:Key="ButtonAutoSortScript"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/autosortscript.png" />
    </Style>

    <!-- Debug Console Button -->
    <Style x:Key="ButtonDebugConsole"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/debugconsole.png" />
    </Style>

    <!-- Log Console Button -->
    <Style x:Key="ButtonLogConsole"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/logconsole.png" />
    </Style>

    <!-- Log Button -->
    <Style x:Key="ButtonLog"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/log.png" />
    </Style>

    <!-- CMD Button -->
    <Style x:Key="ButtonCMD"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/cmd.png" />
    </Style>

    <!-- Properties Button -->
    <Style x:Key="ButtonProperties"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/properties.png" />
    </Style>

    <!-- Play Button -->
    <Style x:Key="ButtonPlay"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/autoplay.png" />
    </Style>

    <!-- Clear Button -->
    <Style x:Key="ButtonClear"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/clear.png" />
    </Style>

    <!-- Folder Button -->
    <Style x:Key="ButtonQuickFolder"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/folder.png" />
    </Style>

    <!-- Revert Arrow Button -->
    <Style x:Key="ButtonRevertArrow"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/revertarrow.png" />
    </Style>

    <!-- Volume Up Button -->
    <Style x:Key="ButtonVolumeUp"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/ArrowUp.png" />
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Opacity"
                        Value="0.6" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Volume Down Button -->
    <Style x:Key="ButtonVolumeDown"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/ArrowDown.png" />
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Opacity"
                        Value="0.6" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Delete Button -->
    <Style x:Key="ButtonDeleteStyle"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/delete.png" />
        <Setter Property="Stretch"
                Value="Uniform" />
    </Style>

    <!-- Export Button -->
    <Style x:Key="ButtonExportStyle"
           TargetType="{x:Type Image}">
        <Setter Property="FlowDirection"
                Value="LeftToRight" />
        <Setter Property="Source"
                Value="../Resources/Images/Buttons/White/export.png" />
        <Setter Property="Stretch"
                Value="Uniform" />
    </Style>


</ResourceDictionary>